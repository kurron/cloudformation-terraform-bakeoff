---
AWSTemplateFormatVersion: "2010-09-09"

Description: This template creates a new Elastic Container Service (ECS) cluster in an existing VPC.

Metadata:
    Foo:
        Description: 'something clever'
    Bar:
        Description: 'something clever'

# These show up in the console and are expected to be provided by the operator
Parameters:
    Project:
        Description: 'Project name this cluster is has been created for'
        Type: 'String'
        Default: 'Bake Off'

    Creator:
        Description: 'Tool or person creating this cluster'
        Type: 'String'
        Default: 'CloudFormation'

    Environment:
        Description: 'Context the cluster will be used in.  Common values are production, testing and development.'
        Type: 'String'
        Default: 'development'

    Notes:
        Description: 'Notes to apply, normally edited in the console.'
        Type: 'String'
        Default: 'No notes'

    AlbSubnets:
        Description: 'Which public subnets the Application Load Balancer should be deployed to.'
        Type: List<AWS::EC2::Subnet::Id>

    Ec2Subnets:
        Description: 'Which private subnets the EC2 instances should be deployed to.'
        Type: List<AWS::EC2::Subnet::Id>

    VPC:
        Type: AWS::EC2::VPC::Id
        Description: 'Which VPC the Applicaion Load Balancer should be deployed to.'

    LoadBalancerPort:
        Description: The port the load balancer should listen on
        Type: Number
        Default: 80

    LoadBalancerType:
        Description: Define if the balancer is an external or internal balancer (internet-facing or internal)
        Type: String
        Default: internet-facing

    SshKeyName:
        Description: 'Name of the key to use when creating the EC2 instances'
        Type: 'AWS::EC2::KeyPair::KeyName'
        ConstraintDescription: must be the name of an existing EC2 KeyPair.
        Default: 'BakeOff'

    InstanceType:
        Description: 'How large of a box to run your containers on'
        Type: 'String'
        Default: 'm4.large'

    SpotPrice:
        Description: 'Maximum bid price to place on your EC2 instances'
        Type: 'String'
        Default: '0.1000'

    BastionSecurityGroup:
        Description: 'Security Group ID used by the Bastion hosts'
        Type: AWS::EC2::SecurityGroup::Id

    ECSAMI:
        Description: EC2 AMI ID, defaulting to the recommended image.
        Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
        Default: /aws/service/ecs/optimized-ami/amazon-linux/recommended/image_id

Resources:
    # Role needed by the EC2 instances so they can interact with ECS services
    AmazonEC2ContainerServiceForEC2Role:
        Type: 'AWS::IAM::Role'
        Properties:
            AssumeRolePolicyDocument:
                Statement:
                -
                    Sid: ""
                    Effect: "Allow"
                    Principal:
                        Service:
                        - "ec2.amazonaws.com"
                    Action:
                    - "sts:AssumeRole"
            Path: '/'
            Policies:
            -
                PolicyName: "EC2CanContactECSRole"
                PolicyDocument:
                    Statement:
                    -
                        Effect: "Allow"
                        Action:
                            - "ec2:*"
                            - "ecs:CreateCluster"
                            - "ecs:DeregisterContainerInstance"
                            - "ecs:DiscoverPollEndpoint"
                            - "ecs:Poll"
                            - "ecs:RegisterContainerInstance"
                            - "ecs:StartTelemetrySession"
                            - "ecs:Submit*"
                            - "ecr:GetAuthorizationToken"
                            - "ecr:BatchCheckLayerAvailability"
                            - "ecr:GetDownloadUrlForLayer"
                            - "ecr:BatchGetImage"
                            - "logs:CreateLogStream"
                            - "logs:PutLogEvents"
                            - "xray:*"
                        Resource: "*"

    # EC2 instances will run using this profile
    ECSInstanceProfile:
        Type: "AWS::IAM::InstanceProfile"
        Properties:
            Path: "/"
            Roles:
            -
                Ref: "AmazonEC2ContainerServiceForEC2Role"

    # Create the cluster
    Cluster:
        Type: 'AWS::ECS::Cluster'
        Properties:
            # cluster names must adhere to this expression: ^[a-zA-Z0-9\-_]{1,255}$
            ClusterName:
                Ref: 'AWS::StackName'

    CloudWatchLogsGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName:
                Ref: 'AWS::StackName'
            RetentionInDays: 7

    EcsLaunchConfiguration:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            EbsOptimized: false
            IamInstanceProfile:
                Ref: 'ECSInstanceProfile'
            ImageId: !Ref 'ECSAMI'
            InstanceMonitoring: false
            InstanceType:
                Ref: 'InstanceType'
            KeyName:
                Ref: 'SshKeyName'
            SecurityGroups: [!Ref 'EcsHostSecurityGroup']
            SpotPrice:
                Ref: SpotPrice
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash -xe
                    echo ECS_CLUSTER=${Cluster} >> /etc/ecs/ecs.config

    # auto scaling group for the ECS servers
    EcsAutoScalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            Cooldown: '120'
            DesiredCapacity: '4'
            HealthCheckType: 'EC2'
            LaunchConfigurationName:
                Ref: 'EcsLaunchConfiguration'
            MaxSize: '6'
            MinSize: '2'
            Tags:
                - Key: 'Name'
                  Value:
                      'Fn::Join': [ ':', [ 'ECS', !Ref 'AWS::StackName' ] ]
                  PropagateAtLaunch: true
                - Key: 'Project'
                  Value:
                      Ref: 'Project'
                  PropagateAtLaunch: true
                - Key: 'Purpose'
                  Value: 'Docker Engine'
                  PropagateAtLaunch: true
                - Key: 'Creator'
                  Value:
                      Ref: 'Creator'
                  PropagateAtLaunch: true
                - Key: 'Environment'
                  Value:
                      Ref: 'Environment'
                  PropagateAtLaunch: true
                - Key: 'Freetext'
                  Value: 'Runs ECS Agent and Docker'
                  PropagateAtLaunch: true
            VPCZoneIdentifier:
                Ref: 'Ec2Subnets'

    # Turn off the instances after work hours
    ScheduledActionDown:
        Type: AWS::AutoScaling::ScheduledAction
        Properties:
            AutoScalingGroupName:
                Ref: EcsAutoScalingGroup
            DesiredCapacity: 0
            MaxSize: 0
            MinSize: 0
            Recurrence: '0 0 * * SUN-SAT'

    # Turn on the instances during work hours
    ScheduledActionUp:
        Type: AWS::AutoScaling::ScheduledAction
        Properties:
            AutoScalingGroupName:
                Ref: EcsAutoScalingGroup
            DesiredCapacity: 4
            MaxSize: 6
            MinSize: 2
            Recurrence: '0 7 * * MON-FRI'

    PublicLoadBalancerSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Access to the public facing load balancer
            VpcId: !Ref 'VPC'
            SecurityGroupIngress:
            - CidrIp: 0.0.0.0/0
              IpProtocol: -1

    EcsHostSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Access to the ECS hosts that run containers
            VpcId: !Ref 'VPC'

    EcsSecurityGroupIngressFromPublicALB:
        Type: AWS::EC2::SecurityGroupIngress
        Properties:
            Description: Ingress from the public ALB
            GroupId: !Ref 'EcsHostSecurityGroup'
            IpProtocol: -1
            SourceSecurityGroupId: !Ref 'PublicLoadBalancerSecurityGroup'

    EcsSecurityGroupIngressFromSelf:
        Type: AWS::EC2::SecurityGroupIngress
        Properties:
            Description: Ingress from other containers in the same security group
            GroupId: !Ref 'EcsHostSecurityGroup'
            IpProtocol: -1
            SourceSecurityGroupId: !Ref 'EcsHostSecurityGroup'

    EcsSecurityGroupIngressFromBastion:
        Type: AWS::EC2::SecurityGroupIngress
        Properties:
            Description: Ingress from Bastion instances
            GroupId: !Ref 'EcsHostSecurityGroup'
            IpProtocol: -1
            SourceSecurityGroupId: !Ref 'BastionSecurityGroup'

    Bucket:
        Type: 'AWS::S3::Bucket'
        Properties:
            AccessControl: Private
            Tags:
                - Key: 'Project'
                  Value:
                      Ref: 'Project'
                - Key: 'Purpose'
                  Value: 'Load balancer logs'
                - Key: 'Creator'
                  Value:
                      Ref: 'Creator'
                - Key: 'Environment'
                  Value:
                      Ref: 'Environment'
                - Key: 'Freetext'
                  Value:
                      Ref: Notes

    BucketPolicy:
        Type: 'AWS::S3::BucketPolicy'
        Properties:
            Bucket:
               Ref: Bucket
            PolicyDocument:
                Statement:
                    -
                        Effect: "Allow"
                        Action:
                            - "s3:PutObject"
                        Resource:
                            Fn::Join:
                                - ""
                                -
                                    - "arn:aws:s3:::"
                                    -
                                        Ref: Bucket
                                    - "/*"
                        Principal: '*'

    LoadBalancer:
        Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
        Properties:
            LoadBalancerAttributes:
                - Key: 'access_logs.s3.enabled'
                  Value: 'true'
                - Key: 'access_logs.s3.bucket'
                  Value:
                      Ref: Bucket
                - Key: 'deletion_protection.enabled'
                  Value: 'false'
                - Key: 'idle_timeout.timeout_seconds'
                  Value: '60'
            Scheme:
                Ref: LoadBalancerType
            SecurityGroups: [!Ref 'PublicLoadBalancerSecurityGroup']
            Subnets:
                Ref: AlbSubnets
            Tags:
                - Key: 'Name'
                  Value: !Ref 'AWS::StackName'
                - Key: 'Project'
                  Value:
                      Ref: 'Project'
                - Key: 'Purpose'
                  Value: 'Load balancer'
                - Key: 'Creator'
                  Value:
                      Ref: 'Creator'
                - Key: 'Environment'
                  Value:
                      Ref: 'Environment'
                - Key: 'Freetext'
                  Value:
                      Ref: Notes

    # We define a default target group here, as this is a mandatory parameter
    # when creating an Application Load Balancer Listener. This is not used, instead
    # a target group is created per-service in each service template (../services/*)
    DefaultTargetGroup:
        Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
        Properties:
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: '/'
            HealthCheckPort:
                Ref: LoadBalancerPort
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 5
            HealthyThresholdCount: 3
            Matcher:
                HttpCode: '200-399'
            Port:
                Ref: LoadBalancerPort
            Protocol: HTTP
            Tags:
                - Key: 'Name'
                  Value: !Ref 'AWS::StackName'
                - Key: 'Project'
                  Value:
                      Ref: 'Project'
                - Key: 'Purpose'
                  Value: 'Default Group'
                - Key: 'Creator'
                  Value:
                      Ref: 'Creator'
                - Key: 'Environment'
                  Value:
                      Ref: 'Environment'
                - Key: 'Freetext'
                  Value: 'Required but never used by ECS'
            UnhealthyThresholdCount: 3
            VpcId:
                Ref: VPC

    # bind the listener to the target group
    LoadBalancerListener:
        Type: 'AWS::ElasticLoadBalancingV2::Listener'
        Properties:
            DefaultActions:
                - Type: forward
                  TargetGroupArn:
                      Ref: DefaultTargetGroup
            LoadBalancerArn:
                Ref: LoadBalancer
            Port:
                Ref: LoadBalancerPort
            Protocol: HTTP

Outputs:
    LoadBalancer:
        Description: A reference to the Application Load Balancer
        Value:
            Ref: LoadBalancer

    LoadBalancerUrl:
        Description: The URL of the ALB
        Value: !GetAtt LoadBalancer.DNSName

    LoadBalancerListener:
        Description: A reference to the associated listener
        Value:
            Ref: LoadBalancerListener

    LogBucket:
        Description: The logical id (name) of the S3 bucket where access logs get written to
        Value:
            Ref: Bucket

    LogBucketDomainName:
        Description: The domain name of the S3 bucket where access logs get written to
        Value: !GetAtt Bucket.DomainName

    Cluster:
        Description: 'EC2 Container Service Cluster ID'
        Value:
            Ref: 'Cluster'

    LogGroup:
        Description: 'The CloudWatch Logs log group that ECS services should send their logs to'
        Value:
            Ref: 'CloudWatchLogsGroup'

    RoleID:
        Description: 'The role that can interact with the load balancer, adding and removing conainers.'
        Value:
            Fn::GetAtt:
                - AmazonEC2ContainerServiceForEC2Role
                - RoleId
